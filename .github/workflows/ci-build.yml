name: .NET Core Desktop

on:
  push:
    branches: [ main ]
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches: [ main ]

env:
  configuration: Release
  productNamespacePrefix: "DynamicData"
  validRelease: ${{ contains(github.event.pull_request.labels.*.name, 'release') && github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true }}
  NUGET_AUTH_TOKEN: ${{ secrets.NUGET_API_KEY }}
  source-url: https://api.nuget.org/v3/index.json

jobs:
  build:

    runs-on: windows-latest

    steps:

    - name: PR Environment
      run: |
        echo Release Tag Contained - ${{ contains(github.event.pull_request.labels.*.name, 'release') }}
        echo Pull Request - ${{ github.event_name == 'pull_request' }}
        echo GitHub Action - ${{ github.event.action == 'closed' }}
        echo Pull Request Merged - ${{ github.event.pull_request.merged == true }}

    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.x

    - name: NBGV
      uses: dotnet/nbgv@master
      with:
        setAllVars: true

    - name: Restore NuGet Packages
      run: dotnet restore
      working-directory: src

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.0.1

    - name: Build
      run: msbuild /t:build,pack /maxcpucount /p:NoPackageAnalysis=true /verbosity:minimal /p:Configuration=${{ env.configuration }}
      working-directory: src

    - name: Install Report Generator
      run: dotnet tool install --global dotnet-reportgenerator-globaltool

    - name: Run Unit Tests
      run: dotnet test --no-build /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput="../../artifacts/coverage/coverage.xml" /p:Include="[${{ env.productNamespacePrefix}}*]*" /p:Exclude="[${{ env.productNamespacePrefix}}*Tests.*]*"
      working-directory: src

    - name: Generate Coverage Report
      run: reportgenerator -reports:"coverage.*.xml" -targetdir:report-output
      working-directory: artifacts/coverage

    - name: Generate Coverage Artifacts
      uses: actions/upload-artifact@master
      with:
        name: Coverage
        path: artifacts/coverage/report-output

    - name: Upload Code Coverage
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
        directory: artifacts/coverage

    - name: NuGet Push
      if: env.validRelease == 'true'
      run: |
        dotnet nuget push **/*.nupkg

    - name: Changelog
      uses: scottbrenner/generate-changelog-action@master
      id: changelog
      if: env.validRelease == 'true'
      env:
        REPO: ${{ github.repository }}

    - name: Create Release
      uses: actions/create-release@v1
      if: env.validRelease == 'true'
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
          tag_name: ${{ steps.nbgv.outputs.SemVer2 }}
          release_name: Release ${{ steps.nbgv.outputs.SemVer2 }}
          body: |
            ${{ steps.changelog.outputs.changelog }}

